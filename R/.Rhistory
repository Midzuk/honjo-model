calc_total_distance(1, c(100000))
calc_total_distance(1, c(1000))
calc_total_distance(1, c(10000))
calc_total_distance(1, c(100))
calc_total_distance(1, c(1000))
calc_total_distance(1, c(100000))
calc_total_distance(1, c(1000000))
calc_total_distance(1, c(10000000))
calc_total_distance(1, c(100000))
calc_total_distance(1, c(10000))
calc_total_distance(1, c(1000))
calc_total_distance(1, c(2000))
calc_total_distance(1, c(3000))
calc_total_distance(1, c(4000))
calc_total_distance(1, c(5000))
calc_total_distance(1, c(6000))
calc_total_distance(1, c(7000))
calc_total_distance(1, c(8000))
calc_total_distance(1, c(9000))
max(0,1)
calc_total_distance <- function(i, x) { # i: 施設種別, x: 施設規模(面積, 病床数)
res <- 0
for (j in 1:length(mesh_codes)) { # j: メッシュ
huff_sum <- 0
for (k in facility$num[[i]] + 1) { # k: 施設番号
if (k == length(facility$num[[i]])) {
huff_sum <- huff_sum + (area_total$area[i] - sum(x)) / (distance2[[i]][[j]][[k]]$distance ^ par[i])
} else {
huff_sum <- huff_sum + x[k] / (distance2[[i]][[j]][[k]]$distance ^ par[i])
}
}
user <- 1 : length(population_2015_1[[j]]) %>%
map_dbl(function(l) { # l : 年齢
population_2015_1[[j]][[l]]$population * use_frequency1[[i]][[l]]$use_frequency
}) %>%
sum()
for (k in facility$num[[i]] + 1) { # k: 施設番号
if (k == length(facility$num[[i]])) {
huff <- (area_total$area[i] - sum(x)) / (distance2[[i]][[j]][[k]]$distance ^ par[i])
} else {
huff_sum <- huff_sum + x[k] / (distance2[[i]][[j]][[k]]$distance ^ par[i])
}
res <- res + user * huff / huff_sum * distance2[[i]][[j]][[k]]$distance
}
}
return(res)
}
calc_total_distance(1, c(10))
calc_total_distance <- function(i, x) { # i: 施設種別, x: 施設規模(面積, 病床数)
res <- 0
for (j in 1:length(mesh_codes)) { # j: メッシュ
huff_sum <- 0
for (k in facility$num[[i]] + 1) { # k: 施設番号
if (k == length(facility$num[[i]])) {
huff_sum <- huff_sum + (area_total$area[i] - sum(x)) / (distance2[[i]][[j]][[k]]$distance ^ par[i])
} else {
huff_sum <- huff_sum + x[k] / (distance2[[i]][[j]][[k]]$distance ^ par[i])
}
}
user <- 1 : length(population_2015_1[[j]]) %>%
map_dbl(function(l) { # l : 年齢
population_2015_1[[j]][[l]]$population * use_frequency1[[i]][[l]]$use_frequency
}) %>%
sum()
for (k in facility$num[[i]] + 1) { # k: 施設番号
if (k == length(facility$num[[i]])) {
huff <- (area_total$area[i] - sum(x)) / (distance2[[i]][[j]][[k]]$distance ^ par[i])
} else {
huff <- x[k] / (distance2[[i]][[j]][[k]]$distance ^ par[i])
}
res <- res + user * huff / huff_sum * distance2[[i]][[j]][[k]]$distance
}
}
return(res)
}
calc_total_distance(1, c(10))
calc_total_distance(1, c(100))
calc_total_distance(1, c(1000))
calc_total_distance(1, c(10000))
calc_total_distance(1, c(100000))
calc_total_distance <- function(i, x) { # i: 施設種別, x: 施設規模(面積, 病床数)
res <- 0
for (j in 1:length(mesh_codes)) { # j: メッシュ
huff_sum <- 0
for (k in facility$num[[i]] + 1) { # k: 施設番号
if (k == length(facility$num[[i]])) {
huff_sum <- huff_sum + (area_total$area[i] - sum(x)) / (distance2[[i]][[j]][[k]]$distance ^ par[i])
} else {
huff_sum <- huff_sum + x[k] / (distance2[[i]][[j]][[k]]$distance ^ par[i])
}
}
user <- 1 : length(population_2015_1[[j]]) %>%
map_dbl(function(l) { # l : 年齢
population_2015_1[[j]][[l]]$population * use_frequency1[[i]][[l]]$use_frequency
}) %>%
sum()
for (k in facility$num[[i]] + 1) { # k: 施設番号
if (k == length(facility$num[[i]])) {
huff <- (area_total$area[i] - sum(x)) / (distance2[[i]][[j]][[k]]$distance ^ par[i])
} else {
huff <- x[k] / (distance2[[i]][[j]][[k]]$distance ^ par[i])
}
res <- res + user * huff / huff_sum * distance2[[i]][[j]][[k]]$distance
}
}
return(res)
}
g <- function(i,x) {
if (area_total$area[i] - sum(x)) {
10 ^ 100
} else {
0
}
}
calc_total_distance1 <- function(i,x) {calc_total_distance(i,x) + g(i,x)}
calc_total_distance1(1, c(100000))
calc_total_distance1(1, c(1000))
g <- function(i,x) {
if (area_total$area[i] - sum(x) < 0) {
10 ^ 100
} else {
0
}
}
calc_total_distance1 <- function(i,x) {calc_total_distance(i,x) + g(i,x)}
calc_total_distance1(1, c(1000))
calc_total_distance1(1, c(10000))
optim(c(0), function (x) {calc_total_distance1(1,x)})
optim(c(0), function (x) {calc_total_distance1(1,x)}, method = "Brent")
optim(c(0), function (x) {calc_total_distance1(1,x)}, method = "Brent", lower = 0, upper = 8874)
calc_total_distance1(1,c(7789.981))
calc_total_distance1(1,c(7789))
calc_total_distance1(1,c(7788))
h <- Vectorize(calc_total_distance1(1,c(7788)))
calc_total_distance1(1,c(9000))
calc_total_distance1(1,c(900))
8874 - 7789.981
optim(c(0,0,0,0,0), function (x) {calc_total_distance1(2,x)})
optim(c(0,0,0,0,100), function (x) {calc_total_distance1(2,x)})
x <- c(1,4,2)
x[x>0]
x[x>2]
calc_total_distance <- function(i, x) { # i: 施設種別, x: 施設規模(面積, 病床数)
res <- 0
for (j in 1:length(mesh_codes)) { # j: メッシュ
huff_sum <- 0
for (k in facility$num[[i]] + 1) { # k: 施設番号
if (k == length(facility$num[[i]])) {
huff_sum <- huff_sum + (area_total$area[i] - sum(x)) / (distance2[[i]][[j]][[k]]$distance ^ par[i])
} else {
huff_sum <- huff_sum + x[k] / (distance2[[i]][[j]][[k]]$distance ^ par[i])
}
}
user <- 1 : length(population_2015_1[[j]]) %>%
map_dbl(function(l) { # l : 年齢
population_2015_1[[j]][[l]]$population * use_frequency1[[i]][[l]]$use_frequency
}) %>%
sum()
for (k in facility$num[[i]] + 1) { # k: 施設番号
if (k == length(facility$num[[i]])) {
huff <- (area_total$area[i] - sum(x)) / (distance2[[i]][[j]][[k]]$distance ^ par[i])
} else {
huff <- x[k] / (distance2[[i]][[j]][[k]]$distance ^ par[i])
}
res <- res + user * huff / huff_sum * distance2[[i]][[j]][[k]]$distance
}
}
return(res)
}
g <- function(i,x) {
if (area_total$area[i] - sum(x) < 0) {
10 ^ 100
} else if (x[x<0] > 0) {
10 ^ 100
} else {
0
}
}
calc_total_distance1 <- function(i,x) {calc_total_distance(i,x) + g(i,x)}
optim(c(0), function (x) {calc_total_distance1(1,x)}, method = "Brent", lower = 0, upper = 8874)
g <- function(i,x) {
if (area_total$area[i] - sum(x) < 0) {
10 ^ 100
} else if (length(x[x<0]) > 0) {
10 ^ 100
} else {
0
}
}
calc_total_distance <- function(i, x) { # i: 施設種別, x: 施設規模(面積, 病床数)
res <- 0
for (j in 1:length(mesh_codes)) { # j: メッシュ
huff_sum <- 0
for (k in facility$num[[i]] + 1) { # k: 施設番号
if (k == length(facility$num[[i]])) {
huff_sum <- huff_sum + (area_total$area[i] - sum(x)) / (distance2[[i]][[j]][[k]]$distance ^ par[i])
} else {
huff_sum <- huff_sum + x[k] / (distance2[[i]][[j]][[k]]$distance ^ par[i])
}
}
user <- 1 : length(population_2015_1[[j]]) %>%
map_dbl(function(l) { # l : 年齢
population_2015_1[[j]][[l]]$population * use_frequency1[[i]][[l]]$use_frequency
}) %>%
sum()
for (k in facility$num[[i]] + 1) { # k: 施設番号
if (k == length(facility$num[[i]])) {
huff <- (area_total$area[i] - sum(x)) / (distance2[[i]][[j]][[k]]$distance ^ par[i])
} else {
huff <- x[k] / (distance2[[i]][[j]][[k]]$distance ^ par[i])
}
res <- res + user * huff / huff_sum * distance2[[i]][[j]][[k]]$distance
}
}
return(res)
}
g <- function(i,x) {
if (area_total$area[i] - sum(x) < 0) {
10 ^ 100
} else if (length(x[x<0]) > 0) {
10 ^ 100
} else {
0
}
}
calc_total_distance1 <- function(i,x) {calc_total_distance(i,x) + g(i,x)}
optim(c(0), function (x) {calc_total_distance1(1,x)}, method = "Brent", lower = 0, upper = 8874)
optim(c(0,0,0,0,100), function (x) {calc_total_distance1(2,x)})
optim(c(0,0,0,1000,0), function (x) {calc_total_distance1(2,x)})
optim(c(0,0,0,100,0), function (x) {calc_total_distance1(2,x)})
optim(c(0,0,1000,100,0), function (x) {calc_total_distance1(2,x)})
optim(c(0,0,100,100,0), function (x) {calc_total_distance1(2,x)})
optim(c(0,100,100,100,0), function (x) {calc_total_distance1(2,x)})
optim(c(0,100,100,0,0), function (x) {calc_total_distance1(2,x)})
optim(c(0,0,0,0,0), function (x) {calc_total_distance1(2,x)})
optim(c(0,0,0,0,0), function (x) {calc_total_distance1(2,x)}, method = BFGS)
optim(c(0,0,0,0,0), function (x) {calc_total_distance1(2,x)}, method = "BFGS")
optim(c(0,0,0,0,0), function (x) {calc_total_distance1(2,x)}, method = "SANN")
for (i in 2:9) {
optim(c(0,0,0,0,0), function (x) {calc_total_distance1(i,x)}, method = "SANN")
}
581-sum(c((52.77539, 53.59706, 92.21750, 154.22759, 133.27675)))
581-sum(c(52.77539, 53.59706, 92.21750, 154.22759, 133.27675))
View(facility)
facility[1]
facility[[1]]
facility$num[1]
facility$num[[1]]
facility$num[[1]] %>% length()
facility$num[[2]] %>% length()
rep(0,2)
facility$num[[2]] %>% length() - 1
for (i in 3:9) {
optim(rep(0, length(facility$num[[i]]) - 1), function (x) {calc_total_distance1(i,x)}, method = "SANN")
}
View(cost)
result <- type2
View(result)
for (i in 3:9) {
optim(rep(0, length(facility$num[[i]]) - 1), function (x) {calc_total_distance1(i,x)}, method = "SANN")
}
View(public_facility)
View(public_facility_lonlat)
optim(rep(0, length(facility$num[[3]]) - 1), function (x) {calc_total_distance1(3,x)}, method = "SANN")
f <- function(x) {(x-1)^2}
optim(c(0),f,method = "Brent", lower = 0, upper = 10)
for (i in 0:3) {
optim(c(i),f,method = "Brent", lower = 0, upper = 10)
}
for (i in 0:3) {
print(optim(c(i),f,method = "Brent", lower = 0, upper = 10))
}
for (i in 0:3) {
print(paste("----------", i, "----------"))
print(optim(c(i),f,method = "Brent", lower = 0, upper = 10))
}
for (i in 3:9) {
print(paste("--------", i, "--------"))
print(optim(rep(0, length(facility$num[[i]]) - 1), function (x) {calc_total_distance1(i,x)}, method = "SANN"))
}
View(medical_facility1)
medical_facility2 <- medical_facility %>%
nest(-num)
View(medical_facility2)
medical_facility2 <- medical_facility
View(commercial_facility)
View(public_facility)
public_facility2 <- public_facility %>%
nest(-type)
View(public_facility2)
medical_facility$hospital_bed
medical_facility$hospital_bed[1..2]
medical_facility$hospital_bed[1,2]
medical_facility$hospital_bed[1]
medical_facility$hospital_bed[c(1,2)]
medical_facility$hospital_bed[1:4]
for (i in 2:9) {
print(paste("--------", i, "--------"))
if (i == 2) { # 病院
s <- medical_facility$hospital_bed[1:(length(facility$num[[i]]) - 1)]
} else if (i == 9) { # スーパー
s <- commercial_facility$area_m2[1:(length(facility$num[[i]]) - 1)]
} else {
if (i >= 3 && i <= 8) {
i2 <- i - 1
} else if (i == 10) {
i2 <- 8
} else {
i2 <- i
}
s <- public_facility2$data[[i2]]$area_m2[1:(length(facility$num[[i]]) - 1)]
}
print(optim(s, function (x) {calc_total_distance1(i,x)}, method = "SANN"))
}
public_facility2 <- public_facility %>%
nest(-type) %>%
arrange(type)
public_facility2$data[[1]]
public_facility2$data[[2]]
public_facility2$data[[3]]
for (i in 3:9) {
print(paste("--------", i, "--------"))
if (i == 2) { # 病院
s <- medical_facility$hospital_bed[1:(length(facility$num[[i]]) - 1)]
} else if (i == 9) { # スーパー
s <- commercial_facility$area_m2[1:(length(facility$num[[i]]) - 1)]
} else {
if (i >= 3 && i <= 8) {
i2 <- i - 1
} else if (i == 10) {
i2 <- 8
} else {
i2 <- i
}
s <- public_facility2$data[[i2]]$area_m2[1:(length(facility$num[[i]]) - 1)]
}
print(optim(s, function (x) {calc_total_distance1(i,x)}, method = "SANN"))
}
for (i in 2:9) {
print(paste("--------", i, "--------"))
print(optim(rep(area_total$area[i] / length(facility$num[[i]]) - 1, length(facility$num[[i]]) - 1), function (x) {calc_total_distance1(i,x)}, method = "SANN"))
}
View(commercial_facility1)
print(optim(c(865.8884), function (x) {calc_total_distance1(3,x)}, method = "SANN"))
print(optim(c(1837.2130, 985.7676, 459.0463, 538.8312, 757.2076, 530.0789, 254.1334, 217.4068, 285.6394, 193.4758, 579.9888, 278.9922), function (x) {calc_total_distance1(4,x)}, method = "SANN"))
print(optim(c(705.1714,542.3523,637.4426,678.5501,861.3712,607.3625,386.0181,384.2108,432.6014,424.9303,582.8256,445.1282), function (x) {calc_total_distance1(4,x)}, method = "SANN"))
library(tidyverse)
library(magrittr)
print(optim(c(705.1714,542.3523,637.4426,678.5501,861.3712,607.3625,386.0181,384.2108,432.6014,424.9303,582.8256,445.1282), function (x) {calc_total_distance1(4,x)}, method = "SANN"))
print(optim(c(844.3683,519.4117,721.2203,799.4304,1124.6516,655.6329,250.0002,185.3437,273.3977,265.2107,580.8297,311.7309), function (x) {calc_total_distance1(4,x)}, method = "SANN"))
9.918527e+02
print(optim(c(9.918527e+02,5.181193e+02,8.179477e+02,9.268595e+02,1.372744e+03,6.779953e+02,1.839361e+02,8.232057e-02,8.846604e+01, 1.259136e+02,5.931832e+02,1.974818e+02), function (x) {calc_total_distance1(4,x)}, method = "SANN"))
print(optim(c(1.071015e+03,4.965138e+02,8.399466e+02,9.903764e+02,1.538574e+03,6.430397e+02,1.366536e+02,3.430076e-02
,6.691826e+00,3.936847e+01,6.155739e+02,1.370584e+022), function (x) {calc_total_distance1(4,x)}, method = "SANN"))
print(optim(c(2.679577025,0.003978812), function (x) {calc_total_distance1(5,x)}, method = "SANN"))
print(optim(c(1102.1340,499.7783,1060.5392), function (x) {calc_total_distance1(6,x)}, method = "SANN"))
print(optim(c(1034.0077,426.9638,1195.7450), function (x) {calc_total_distance1(6,x)}, method = "SANN"))
calc_total_distance1(6,c(1034.0077,426.9638,1195.7450))
calc_total_distance1(6,c(1034.0077,426.9638,1195.1450))
calc_total_distance1(6,c(1034.0077,426.9538,1195.7450))
calc_total_distance1(6,c(1034.0077,427.9538,1195.7450))
calc_total_distance1(6,c(1034.0077,427.9538,1196.7450))
print(optim(c(1034.0077,426.9638,1195.7450), function (x) {calc_total_distance1(6,x)}, method = "SANN"))
print(optim(c(9.918527e+02,5.181193e+02,8.179477e+02,9.268595e+02,1.372744e+03,6.779953e+02,1.839361e+02,8.232057e-02,8.846604e+01, 1.259136e+02,5.931832e+02,1.974818e+02), function (x) {calc_total_distance1(4,x)}, method = "SANN"))
function (x) {calc_total_distance1(4,c(9.918527e+02,5.181193e+02,8.179477e+02,9.268595e+02,1.372744e+03,6.779953e+02,1.839361e+02,8.232057e-02,8.846604e+01, 1.259136e+02,5.931832e+02,1.974818e+02))
)
function (x) {calc_total_distance1(4,c(9.918527e+02,5.181193e+02,8.179477e+02,9.268595e+02,1.372744e+03,6.779953e+02,1.839361e+02,8.232057e-02,8.846604e+01, 1.259136e+02,5.931832e+02,1.974818e+02)
)
)
print(optim(c(9.918527e+02,5.181193e+02,8.179477e+02,9.268595e+02,1.372744e+03,6.779953e+02,1.839361e+02,8.232057e-02,8.846604e+01, 1.259136e+02,5.931832e+02,1.974818e+02), function (x) {calc_total_distance1(4,x)}, method = "SANN"))
calc_total_distance1(4,c(9.918527e+02,5.181193e+02,8.179477e+02,9.268595e+02,1.372744e+03,6.779953e+02,1.839361e+02,8.232057e-02,8.846604e+01, 1.259136e+02,5.931832e+02,1.974818e+02))
calc_total_distance1(4,c(9.918527e+02,5.181193e+02,8.179477e+02,9.268595e+02,1.372744e+03,6.779953e+02,1.839361e+02,8.232057e-02,8.846604e+01, 1.259136e+02,5.931832e+02,1.974818e+02-1))
calc_total_distance1(4,c(9.918527e+02,5.181193e+02,8.179477e+02,9.268595e+02,1.372744e+03,6.779953e+02,1.839361e+02,8.232057e-02,8.846604e+01, 1.259136e+02,5.931832e+02,1.974818e+02-2))
calc_total_distance1(4,c(9.918527e+02,5.181193e+02,8.179477e+02,9.268595e+02,1.372744e+03,6.779953e+02,1.839361e+02,8.232057e-02,8.846604e+01, 1.259136e+02,5.931832e+02,1.974818e+02-3))
print(optim(c(9.918527e+02,5.181193e+02,8.179477e+02,9.268595e+02,1.372744e+03,6.779953e+02,1.839361e+02,8.232057e-02,8.846604e+01, 1.259136e+02,5.931832e+02,1.974818e+02), function (x) {calc_total_distance1(4,x)}, method = "SANN"))
print(optim(c(9.918527e+02,5.181193e+02,8.179477e+02,9.268595e+02,1.372744e+03,6.779953e+02,1.839361e+02,8.232057e-02,8.846604e+01, 1.259136e+02,5.931832e+02,1.974818e+02), function (x) {calc_total_distance1(4,x)}, method = "Nelder-Mead"))
print(optim(c(1251.5382205, 428.6006958, 569.1096039, 1007.9696728, 1851.8227118, 391.7187889, 136.5660600, 40.4503257,0.4991295, 17.6870724, 682.1687588, 159.9154962), function (x) {calc_total_distance1(4,x)}, method = "Nelder-Mead"))
print(optim(c(1.236575e+03,4.011917e+02,5.439963e+02,1.061800e+03 ,1.983146e+03, 3.620335e+02 ,1.124730e+02 ,6.050620e-02,1.726917e-02 ,7.458441e+00 ,1.474317e+03 ,1.192361e+02), function (x) {calc_total_distance1(4,x)}, method = "Nelder-Mead"))
ans
ans <- optim(c(1.209298e+03, 4.089291e+02, 5.614903e+02, 1.087535e+03, 1.960513e+03, 3.755871e+02, 1.109646e+02, 1.502581e-04, 2.484615e+00, 1.021727e+01, 1.559258e+03, 1.263742e+02), function (x) {calc_total_distance1(4,x)}, method = "Nelder-Mead")
print(ans)
ans <- optim(ans$par, function (x) {calc_total_distance1(4,x)}, method = "Nelder-Mead")
ans
ans <- optim(ans$par, function (x) {calc_total_distance1(4,x)}, method = "Nelder-Mead")
ans <- optim(ans$par, function (x) {calc_total_distance1(4,x)}, method = "Nelder-Mead")
print(ans)
ans <- optim(ans$par, function (x) {calc_total_distance1(4,x)}, method = "Nelder-Mead")
print(ans)
ans <- optim(ans$par, function (x) {calc_total_distance1(4,x)}, method = "Nelder-Mead")
print(ans)
par <- list(c(1,2),c(2,3))
par
par[1]
par[[1]]
par <- list(c(52.80104,53.59158,92.18381,154.19881,133.28055),
c(865.8886),
c(1.188895e+03,4.098005e+02,5.790303e+02,1.085774e+03,1.937060e+03,3.900983e+02,1.106556e+02,1.512622e-03,1.878734e-03,1.321827e+01,1.571621e+03,1.291475e+02),
c(0.0016889395,0.0003616966),
c(1034.0077,426.9638,1195.7450),
c(643.34234,66.64962),
c(2827.4528,480.6773,1473.0287,1210.4129,7524.9970),
c(11422.685,5267.759,13213.767,1592.885))
par[[1]]
for (i in 2:9) {
j <- 0
k <- TRUE
ans <- optim(par[[i-1]], function (x) {calc_total_distance1(i,x)}, method = "Nelder-Mead")
while ((j < 25) && k) {
if (ans$convergence == 0) {
k <- FALSE
}
ans <- optim(ans$par, function (x) {calc_total_distance1(i,x)}, method = "Nelder-Mead")
j <- j + 1
}
print(paste("--------", i, "--------"))
print(ans)
}
par <- list(c(52.80104,53.59158,92.18381,154.19881,133.28055),
c(865.8886),
c(1.188895e+03,4.098005e+02,5.790303e+02,1.085774e+03,1.937060e+03,3.900983e+02,1.106556e+02,1.512622e-03,1.878734e-03,1.321827e+01,1.571621e+03,1.291475e+02),
c(0.0016889395,0.0003616966),
c(1034.0077,426.9638,1195.7450),
c(643.34234,66.64962),
c(2827.4528,480.6773,1473.0287,1210.4129,7524.9970),
c(11422.685,5267.759,13213.767,1592.885))
par[[1]]
par[[1]][1]
par[[1]][[1]]
optim(par[[1]], function (x) {calc_total_distance1(2,x)}, method = "Nelder-Mead")
optim(c(0,0,0,0,0), function (x) {calc_total_distance1(2,x)})
View(distance2)
par <- c(0.6398631, 2.010507, 0.853016, 1.209198, 0, 1.738493, 0, 0.8526133, 0) # 変数
par1 <- list(c(52.80104,53.59158,92.18381,154.19881,133.28055),
c(865.8886),
c(1.188895e+03,4.098005e+02,5.790303e+02,1.085774e+03,1.937060e+03,3.900983e+02,1.106556e+02,1.512622e-03,1.878734e-03,1.321827e+01,1.571621e+03,1.291475e+02),
c(0.0016889395,0.0003616966),
c(1034.0077,426.9638,1195.7450),
c(643.34234,66.64962),
c(2827.4528,480.6773,1473.0287,1210.4129,7524.9970),
c(11422.685,5267.759,13213.767,1592.885))
for (i in 2:9) {
j <- 0
k <- TRUE
ans <- optim(par1[[i-1]], function (x) {calc_total_distance1(i,x)}, method = "Nelder-Mead")
while ((j < 25) && k) {
if (ans$convergence == 0) {
k <- FALSE
}
ans <- optim(ans$par, function (x) {calc_total_distance1(i,x)}, method = "Nelder-Mead")
j <- j + 1
}
print(paste("--------", i, "--------"))
print(ans)
}
9:2
for (i in 9:3) {
j <- 0
k <- TRUE
ans <- optim(par1[[i-1]], function (x) {calc_total_distance1(i,x)}, method = "Nelder-Mead")
while ((j < 30) && k) {
if (ans$convergence == 0) {
k <- FALSE
}
ans <- optim(ans$par, function (x) {calc_total_distance1(i,x)}, method = "Nelder-Mead")
j <- j + 1
}
print(paste("--------", i, "--------"))
print(ans)
}
for (i in 2:9) {
j <- 0
k <- TRUE
ans <- optim(rep(0, length(par1[[i-1]])-1), function (x) {calc_total_distance1(i,x)}, method = "Nelder-Mead")
while ((j < 30) && k) {
if (ans$convergence == 0) {
k <- FALSE
}
ans <- optim(ans$par, function (x) {calc_total_distance1(i,x)}, method = "Nelder-Mead")
j <- j + 1
}
print(paste("--------", i, "--------"))
print(ans)
}
length(par1[[1]])
for (i in 2:9) {
j <- 0
k <- TRUE
ans <- optim(rep(0, length(par1[[i-1]])), function (x) {calc_total_distance1(i,x)}, method = "Nelder-Mead")
while ((j < 30) && k) {
if (ans$convergence == 0) {
k <- FALSE
}
ans <- optim(ans$par, function (x) {calc_total_distance1(i,x)}, method = "Nelder-Mead")
j <- j + 1
}
print(paste("--------", i, "--------"))
print(ans)
}
for (i in 9:4) {
j <- 0
k <- TRUE
ans <- optim(rep(0, length(par1[[i-1]])), function (x) {calc_total_distance1(i,x)}, method = "Nelder-Mead")
while ((j < 30) && k) {
if (ans$convergence == 0) {
k <- FALSE
}
ans <- optim(ans$par, function (x) {calc_total_distance1(i,x)}, method = "Nelder-Mead")
j <- j + 1
}
print(paste("--------", i, "--------"))
print(ans)
}
