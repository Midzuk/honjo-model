i2 <- 8
} else {
i2 <- i
}
s <- public_facility1[[i2]][[k]]$area_m2
}
us[k] <- s * exp(- x * (distance1[[i]][[j]][[k]]$distance - distance_min))
}
# メッシュ上の利用者数合計
user <- 1 : length(population_2015_1[[j]]) %>%
map_dbl(function(k) { # k : 年齢
population_2015_1[[j]][[k]]$population * use_frequency1[[i]][[k]]$use_frequency
}) %>%
sum()
for (k in 1 : length(distance1[[i]][[j]])) {
p <- us[k] / sum(us) # あるメッシュある施設の施設選択率
# 年齢ごとの利用回数合計
users[k] <- users[k] + p * user
}
}
for (k in 1 : length(distance1[[i]][[1]])) {
use_rates[k] <- users[k] / sum(users)
}
return(use_rates)
}
a <- calc_use_rate(1,0.1)
a
a <- calc_use_rate(1,0.2)
a
a <- calc_use_rate(1,0.001)
a
View(facility_user)
View(commercial_facility)
View(commercial_facility1)
a <- calc_use_rate(9,0.001)
commercial_facility1[[1]]
commercial_facility1[[1]]$area_m2
# xは正のみ
calc_use_rate <- function(i, x) {
users <- rep(0, length(distance1[[i]][[1]])) # 汚い
use_rates <- rep(0, length(distance1[[i]][[1]])) # 汚い
for (j in 1 : length(distance1[[i]])) { # j : メッシュ
sum = 0
us <- rep(0, length(distance1[[i]][[j]]))
distance_min <- distance1[[i]][[j]][[1]]$distance
for (k in 2 : length(distance1[[i]][[j]])) { # k : 施設番号
if (distance1[[i]][[j]][[k]]$distance < distance_min) {
distance_min <- distance1[[i]][[j]][[k]]$distance
}
}
for (k in 1 : length(distance1[[i]][[j]])) { # k : 施設番号
s <- 0
if (i == 2) { # 病院
s <- medical_facility1[[k]]$area_m2
} else if (i == 9) { # スーパー
s <- commercial_facility1[[k]]$area_m2
} else {
if (i >= 3 && i <= 8) {
i2 <- i - 1
} else if (i == 10) {
i2 <- 8
} else {
i2 <- i
}
s <- public_facility1[[i2]][[k]]$area_m2
}
us[k] <- s * exp(- x * (distance1[[i]][[j]][[k]]$distance - distance_min))
}
# メッシュ上の利用者数合計
user <- 1 : length(population_2015_1[[j]]) %>%
map_dbl(function(k) { # k : 年齢
population_2015_1[[j]][[k]]$population * use_frequency1[[i]][[k]]$use_frequency
}) %>%
sum()
for (k in 1 : length(distance1[[i]][[j]])) {
p <- us[k] / sum(us) # あるメッシュある施設の施設選択率
# 年齢ごとの利用回数合計
users[k] <- users[k] + p * user
}
}
for (k in 1 : length(distance1[[i]][[1]])) {
use_rates[k] <- users[k] / sum(users)
}
return(use_rates)
}
a <- calc_use_rate(9,0.001)
a
a <- calc_use_rate(9,0.01)
a
a <- calc_use_rate(9,0.005)
a
a <- calc_use_rate(9,0.1)
a
View(medical_facility1)
use_rate_error <- function(i, x) {
es <- rep(0, length(distance1[[i]][[1]]))
use_rates_est <- calc_use_rate(i, x)
for (k in 1 : length(distance1[[i]][[1]])) { # k : 施設番号
if (i == 2) { # 病院
use_rate <- medical_facility1[[k]]$use_rate
} else if (i == 9) { # スーパー
use_rate <- commercial_facility1[[k]]$use_rate
} else {
if (i >= 3 && i <= 8) {
i2 <- i - 1
} else if (i == 10) {
i2 <- 8
} else {
i2 <- i
}
use_rate <- public_facility1[[i2]][[k]]$use_rate
}
es[k] <- (use_rates_est[k] - use_rate) ^ 2
}
return(es)
}
use_rate_error(1,1)
use_rate_error(1,1)
use_rate_error <- function(i, x) {
es <- rep(0, length(distance1[[i]][[1]]))
use_rates_est <- calc_use_rate(i, x)
for (k in 1 : length(distance1[[i]][[1]])) { # k : 施設番号
if (i == 2) { # 病院
use_rate <- medical_facility1[[k]]$use_rate
} else if (i == 9) { # スーパー
use_rate <- commercial_facility1[[k]]$use_rate
} else {
if (i >= 3 && i <= 8) {
i2 <- i - 1
} else if (i == 10) {
i2 <- 8
} else {
i2 <- i
}
use_rate <- public_facility1[[i2]][[k]]$use_rate
}
es[k] <- (use_rates_est[k] - use_rate) ^ 2
}
return(sum(es))
}
use_rate_error(1,1)
optimize(use_rate_error, interval = c(0, 1000), i = 1)
optimize(use_rate_error, interval = c(0, 1000000), i = 1)
optimize(use_rate_error, interval = c(0, 1000000), i = 2)
optimize(use_rate_error, interval = c(0, 1000000), i = 3)
optimize(use_rate_error, interval = c(0, 1000000), i = 4)
optimize(use_rate_error, interval = c(0, 1000000), i = 9)
# xは正のみ
calc_use_rate <- function(i, x) {
users <- rep(0, length(distance1[[i]][[1]])) # 汚い
use_rates <- rep(0, length(distance1[[i]][[1]])) # 汚い
for (j in 1 : length(distance1[[i]])) { # j : メッシュ
sum = 0
us <- rep(0, length(distance1[[i]][[j]]))
distance_min <- distance1[[i]][[j]][[1]]$distance
for (k in 2 : length(distance1[[i]][[j]])) { # k : 施設番号
if (distance1[[i]][[j]][[k]]$distance < distance_min) {
distance_min <- distance1[[i]][[j]][[k]]$distance
}
}
for (k in 1 : length(distance1[[i]][[j]])) { # k : 施設番号
s <- 0
if (i == 2) { # 病院
s <- medical_facility1[[k]]$hospital_bed
} else if (i == 9) { # スーパー
s <- commercial_facility1[[k]]$area_m2
} else {
if (i >= 3 && i <= 8) {
i2 <- i - 1
} else if (i == 10) {
i2 <- 8
} else {
i2 <- i
}
s <- public_facility1[[i2]][[k]]$area_m2
}
us[k] <- s * exp(- x * (distance1[[i]][[j]][[k]]$distance - distance_min))
}
# メッシュ上の利用者数合計
user <- 1 : length(population_2015_1[[j]]) %>%
map_dbl(function(k) { # k : 年齢
population_2015_1[[j]][[k]]$population * use_frequency1[[i]][[k]]$use_frequency
}) %>%
sum()
for (k in 1 : length(distance1[[i]][[j]])) {
p <- us[k] / sum(us) # あるメッシュある施設の施設選択率
# 年齢ごとの利用回数合計
users[k] <- users[k] + p * user
}
}
for (k in 1 : length(distance1[[i]][[1]])) {
use_rates[k] <- users[k] / sum(users)
}
return(use_rates)
}
use_rate_error <- function(i, x) {
es <- rep(0, length(distance1[[i]][[1]]))
use_rates_est <- calc_use_rate(i, x)
for (k in 1 : length(distance1[[i]][[1]])) { # k : 施設番号
if (i == 2) { # 病院
use_rate <- medical_facility1[[k]]$use_rate
} else if (i == 9) { # スーパー
use_rate <- commercial_facility1[[k]]$use_rate
} else {
if (i >= 3 && i <= 8) {
i2 <- i - 1
} else if (i == 10) {
i2 <- 8
} else {
i2 <- i
}
use_rate <- public_facility1[[i2]][[k]]$use_rate
es[k] <- (use_rates_est[k] - use_rate) ^ 2
}
}
return(sum(es))
}
optimize(use_rate_error, interval = c(0, 1000000), i = 9)
calc_use_rate(9, 100000)
use_rate_error(9, 100000)
commercial_facility1[[1]]$use_rate
use_rate_error <- function(i, x) {
es <- rep(0, length(distance1[[i]][[1]]))
use_rates_est <- calc_use_rate(i, x)
for (k in 1 : length(distance1[[i]][[1]])) { # k : 施設番号
if (i == 2) { # 病院
use_rate <- medical_facility1[[k]]$use_rate
} else if (i == 9) { # スーパー
use_rate <- commercial_facility1[[k]]$use_rate
} else {
if (i >= 3 && i <= 8) {
i2 <- i - 1
} else if (i == 10) {
i2 <- 8
} else {
i2 <- i
}
use_rate <- public_facility1[[i2]][[k]]$use_rate
}
es[k] <- (use_rates_est[k] - use_rate) ^ 2
}
return(sum(es))
}
use_rate_error(9, 100000)
use_rate_error(9, 1000000)
use_rate_error(9, 100)
use_rate_error(9, 10)
use_rate_error(9, 1)
use_rate_error(9, 0.1)
optimize(use_rate_error, interval = c(0, 1), i = 9)
optimize(use_rate_error, interval = c(0, 10), i = 9)
optimize(use_rate_error, interval = c(0, 100), i = 9)
optimize(use_rate_error, interval = c(0, 10), i = 9)
use_rate_error(2, 1)
optimize(use_rate_error, interval = c(0, 10), i = 2)
optimize(use_rate_error, interval = c(0, 1), i = 2)
f <- function(x) {use_rate_error(9,x)}
f
plot(f, 0, 10)
plot(f, 0, 1)
y <- function(x){ return(x^2) }
plot(y,-1,1)
f <- function(x) {return(use_rate_error(9,x))}
plot(f, 0, 1)
h <- Vectorize(f)
curve(h, 0, 2)
curve(h, 0, 0.01)
optimize(use_rate_error, interval = c(0, 1), i = 9)
optimize(use_rate_error, interval = c(0, 0.001), i = 9)
optimize(use_rate_error, interval = c(0, 0.0001), i = 9)
use_rate_error(9,0)
use_rate_error(1,0)
optimize(use_rate_error, interval = c(0, 0.0001), i = 1)
f <- function(x) {return(use_rate_error(1,x))}
h <- Vectorize(f)
curve(h, 0, 0.1)
curve(h, 0, 0.01)
f <- function(x) {return(use_rate_error(2,x))}
h <- Vectorize(f)
curve(h, 0, 1)
f <- function(x) {return(use_rate_error(3,x))}
h <- Vectorize(f)
curve(h, 0, 1)
f <- function(x) {return(use_rate_error(4,x))}
h <- Vectorize(f)
curve(h, 0, 1)
f <- function(x) {return(use_rate_error(5,x))}
h <- Vectorize(f)
curve(h, 0, 1)
curve(h, 0, 10)
curve(h, 0, 0.01)
f <- function(x) {return(use_rate_error(6,x))}
h <- Vectorize(f)
curve(h, 0, 1)
f <- function(x) {return(use_rate_error(7,x))}
h <- Vectorize(f)
curve(h, 0, 1)
f <- function(x) {return(use_rate_error(8,x))}
h <- Vectorize(f)
curve(h, 0, 1)
f <- function(x) {return(use_rate_error(9,x))}
h <- Vectorize(f)
curve(h, 0, 1)
curve(h, 0, 0.01)
curve(h, 0, 0.0001)
f <- function(x) {return(use_rate_error(10,x))}
h <- Vectorize(f)
curve(h, 0, 1)
f <- function(x) {return(use_rate_error(1,x))}
h <- Vectorize(f)
curve(h, 0, 1)
f <- function(x) {return(use_rate_error(2,x))}
h <- Vectorize(f)
curve(h, 0, 1)
View(distance1)
f <- function(x) {return(use_rate_error(4,x))}
h <- Vectorize(f)
curve(h, 0, 1)
calc_use_rate(4,0)
# xは正のみ
# ハフモデル(対数じゃない版)
calc_use_rate1 <- function(i, x) {
users <- rep(0, length(distance1[[i]][[1]])) # 汚い
use_rates <- rep(0, length(distance1[[i]][[1]])) # 汚い
for (j in 1 : length(distance1[[i]])) { # j : メッシュ
sum = 0
us <- rep(0, length(distance1[[i]][[j]]))
distance_max <- 0
for (k in 2 : length(distance1[[i]][[j]])) { # k : 施設番号
if (distance1[[i]][[j]][[k]]$distance > distance_max) {
distance_max <- distance1[[i]][[j]][[k]]$distance
}
}
for (k in 1 : length(distance1[[i]][[j]])) { # k : 施設番号
s <- 0
if (i == 2) { # 病院
s <- medical_facility1[[k]]$hospital_bed
} else if (i == 9) { # スーパー
s <- commercial_facility1[[k]]$area_m2
} else {
if (i >= 3 && i <= 8) {
i2 <- i - 1
} else if (i == 10) {
i2 <- 8
} else {
i2 <- i
}
s <- public_facility1[[i2]][[k]]$area_m2
}
us[k] <- s / (distance1[[i]][[j]][[k]]$distance / distance_max) ^ x
}
# メッシュ上の利用者数合計
user <- 1 : length(population_2015_1[[j]]) %>%
map_dbl(function(k) { # k : 年齢
population_2015_1[[j]][[k]]$population * use_frequency1[[i]][[k]]$use_frequency
}) %>%
sum()
for (k in 1 : length(distance1[[i]][[j]])) {
p <- us[k] / sum(us) # あるメッシュある施設の施設選択率
# 年齢ごとの利用回数合計
users[k] <- users[k] + p * user
}
}
for (k in 1 : length(distance1[[i]][[1]])) {
use_rates[k] <- users[k] / sum(users)
}
return(use_rates)
}
use_rate_error <- function(i, x) {
es <- rep(0, length(distance1[[i]][[1]]))
use_rates_est <- calc_use_rate1(i, x)
for (k in 1 : length(distance1[[i]][[1]])) { # k : 施設番号
if (i == 2) { # 病院
use_rate <- medical_facility1[[k]]$use_rate
} else if (i == 9) { # スーパー
use_rate <- commercial_facility1[[k]]$use_rate
} else {
if (i >= 3 && i <= 8) {
i2 <- i - 1
} else if (i == 10) {
i2 <- 8
} else {
i2 <- i
}
use_rate <- public_facility1[[i2]][[k]]$use_rate
}
es[k] <- (use_rates_est[k] - use_rate) ^ 2
}
return(sum(es))
}
f <- function(x) {return(use_rate_error(4,x))}
h <- Vectorize(f)
curve(h, 0, 1)
curve(h, 0, 10)
f <- function(x) {return(use_rate_error(1,x))}
h <- Vectorize(f)
curve(h, 0, 10)
f <- function(x) {return(use_rate_error(2,x))}
h <- Vectorize(f)
curve(h, 0, 10)
f <- function(x) {return(use_rate_error(3,x))}
h <- Vectorize(f)
curve(h, 0, 10)
f <- function(x) {return(use_rate_error(4,x))}
h <- Vectorize(f)
curve(h, 0, 10)
f <- function(x) {return(use_rate_error(5,x))}
h <- Vectorize(f)
curve(h, 0, 10)
curve(h, 0, 100)
f <- function(x) {return(use_rate_error(6,x))}
h <- Vectorize(f)
curve(h, 0, 100)
curve(h, 0, 10)
f <- function(x) {return(use_rate_error(7,x))}
h <- Vectorize(f)
curve(h, 0, 10)
curve(h, 0, 1)
f <- function(x) {return(use_rate_error(8,x))}
h <- Vectorize(f)
curve(h, 0, 10)
f <- function(x) {return(use_rate_error(9,x))}
h <- Vectorize(f)
curve(h, 0, 10)
f <- function(x) {return(use_rate_error(10,x))}
h <- Vectorize(f)
curve(h, 0, 10)
curve(h, 0, 100)
curve(h, 0, 10)
f <- function(x) {return(use_rate_error(1,x))}
h <- Vectorize(f)
curve(h, 0, 10)
optimize(use_rate_error, interval = c(0, 10), i = 1)
optimize(use_rate_error, interval = c(0, 4), i = 1)
curve(h, 0, 3)
optimize(use_rate_error, interval = c(0, 10), i = 2)
f <- function(x) {return(use_rate_error(3,x))}
h <- Vectorize(f)
curve(h, 0, 10)
optimize(use_rate_error, interval = c(0, 10), i = 3)
optimize(use_rate_error, interval = c(0, 10), i = 4)
optimize(use_rate_error, interval = c(0, 10), i = 5)
f <- function(x) {return(use_rate_error(5,x))}
h <- Vectorize(f)
curve(h, 0, 10)
f <- function(x) {return(use_rate_error(6,x))}
h <- Vectorize(f)
curve(h, 0, 10)
optimize(use_rate_error, interval = c(0, 10), i = 6)
f <- function(x) {return(use_rate_error(7,x))}
h <- Vectorize(f)
curve(h, 0, 10)
f <- function(x) {return(use_rate_error(8,x))}
h <- Vectorize(f)
curve(h, 0, 10)
optimize(use_rate_error, interval = c(0, 10), i = 8)
f <- function(x) {return(use_rate_error(9,x))}
h <- Vectorize(f)
curve(h, 0, 10)
optimize(use_rate_error, interval = c(0, 10), i = 9)
f <- function(x) {return(use_rate_error(10,x))}
h <- Vectorize(f)
curve(h, 0, 10)
use_rates <- distance1 %>%
map(~ . %>%
map(~ . %>%
map(~ . %>%
mutate(use_rate = 0))))
View(use_rates)
View(distance1)
use_rates <- distance1 %>%
map(~ . %>%
map(~ . %>%
map(~ . %>%
mutate(use_rate = 0))))
View(use_rates)
View(use_rates)
use_rates <- distance1 %>%
map(~ . %>%
map(~ . %>%
mutate(use_rate = 0)))
View(distance1)
use_rates <- distance1 %>%
map(~ . %>%
map(~ . %>%
map(~ . %>%
map(~ . %>%
mutate(use_rate = 0))))))
use_rates <- distance1 %>%
map(~ . %>%
map(~ . %>%
map(~ . %>%
map(~ . %>%
mutate(use_rate = 0)))))
View(use_rates)
View(use_rates)
use_rates <- distance1 %>%
map(~ . %>%
map(~ . %>%
map(~ . %>%
map(~ . %>%
mutate(use_rate = 0)))))
View(use_rates)
use_rates <- distance1 %>%
mutate(use_rate = 0)
length(distance1)
length(distance1[[1]]
)
length(distance1[[1]][[1]])
f <- function(x) {return(use_rate_error(10,x))}
h <- Vectorize(f)
curve(h, 0, 100)
